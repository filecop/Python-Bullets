Generators in Python
In Python, a generator is a special type of iterator that can be used to generate a sequence of values. Unlike normal functions that return a single value using the return statement, generators use the yield statement to produce a series of values, one at a time.

Generators are useful for generating large sequences of values without storing them all in memory at once, which can be memory-efficient. They are also used for lazy evaluation, where values are generated only when needed.

In this example:

The my_generator function is defined with three yield statements. Each yield statement produces a value when the generator is iterated over.
A generator object gen is created by calling the my_generator function. This does not execute the function; instead, it returns a generator object.
The next() function is used to retrieve values from the generator one at a time. Each call to next() executes the generator function until the next yield statement is encountered, at which point it pauses and returns the value.
When there are no more values to yield, attempting to retrieve more values will raise a StopIteration exception, indicating that the generator has been exhausted.



Iterators in Python
In Python, an iterator is an object that allows iteration over a sequence of elements. It provides a way to access elements of a container one by one without needing to know the underlying structure of the container.

Here's a simple example of iterators in Python:

We have a list my_list containing integers.
We create an iterator my_iter using the iter() function.
We use the next() function to access each element of the list sequentially.
Each time next() is called on the iterator, it returns the next element of the sequence. If there are no more elements, it raises a StopIteration exception.
# Define a list
my_list = [1, 2, 3, 4, 5]

# Get an iterator for the list
my_iter = iter(my_list)

# Print each element of the list using the iterator
print(next(my_iter))  # Output: 1
print(next(my_iter))  # Output: 2
print(next(my_iter))  # Output: 3
print(next(my_iter))  # Output: 4
print(next(my_iter))  # Output: 5


Creating iterator in python
In Python, you can create your own iterator using a class that implements two special methods: __iter__() and __next__().

Here's a simple example of how to create iterator in python. In this example:

We define a class MyIterator that implements the iterator protocol.
The __init__() method initializes the iterator with the data and sets the index to 0.
The __iter__() method returns the iterator itself, as required by the iterator protocol.
The __next__() method returns the next element in the data. If there are no more elements, it raises a StopIteration exception.
We instantiate MyIterator with a list and then iterate over it using a for loop. The loop automatically calls __next__() until StopIteration is raised.

class MyIterator:
    def __init__(self, data):
        self.data = data
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index < len(self.data):
            result = self.data[self.index]
            self.index += 1
            return result
        else:
            raise StopIteration

# Example usage
my_list = [1, 2, 3, 4, 5]
my_iter = MyIterator(my_list)

for item in my_iter:
    print(item)


Implement Prime Iterator
Create a Python class called PrimeIterator that generates prime numbers. Your task is to implement the PrimeIterator class so that it can be used as an iterator to generate prime numbers up to a given limit.

Your class should have the following methods:

__init__(self, limit): Initializes the iterator with a limit limit, which represents the upper bound for prime numbers generation.
__iter__(self): Returns the iterator object itself.
__next__(self): Generates the next prime number in the sequence.
Your class should adhere to the following rules:

Prime numbers should be generated starting from 2 up to and including the specified limit.
The class should raise a StopIteration exception when there are no more prime numbers to generate.



class PrimeIterator:
    def __init__(self, limit):
        self.limit = limit
        self.current = 1

    def __iter__(self):
        return self

    def __next__(self):
        self.current += 1
        while not self.is_prime(self.current):
            self.current += 1
        if self.current > self.limit:
            raise StopIteration
        return self.current

    def is_prime(self, num):
        if num <= 1:
            return False
        if num <= 3:
            return True
        if num % 2 == 0 or num % 3 == 0:
            return False
        i = 5
        while i * i <= num:
            if num % i == 0 or num % (i + 2) == 0:
                return False
            i += 6
        return True
